[
["index.html", "Data Analysis in Ecology with R and Stan Preface Why this book? About this book How to contribute? Acknowledgments", " Data Analysis in Ecology with R and Stan Fränzi Korner-Nievergelt and Tobias Roth 2018-08-13 Preface Why this book? In 2015, we wrote a statistics book for Master/PhD level Bayesian data analyses in ecology (F. Korner-Nievergelt et al. 2015). You can order it here. People seemed to like it (e.g. (Harju 2016)). Since then, two parallel processes happen. First, we learn more and we become more confident in what we do, or what we do not, and why we do what we do. Second, several really clever people develop software that broaden the spectrum of ecological models that now easily can be applied by ecologists used to work with R. With this e-book, we open the possibility to add new or substantially revised material. In most of the time, it should be in a state that it can be printed and used together with the book as handout for our stats courses. About this book We do not copy text from the book into the e-book. Therefore, we refer to the book (F. Korner-Nievergelt et al. 2015) for reading about the basic theory on doing Bayesian data analyses using linear models. However, Chapters 1 to 17 of this dynamic e-book correspond to the book chapters. In each chapter, we may provide updated R-codes and/or additional material. The following chapters contain completely new material that we think may be useful for ecologists. While we show the R-code behind most of the analyses, we sometimes choose not to show all the code in the html version of the book. This is particularly the case for some of the illustrations. An intrested reader can always consult the public GitHub repository with the rmarkdown-files that were used to generate the book. How to contribute? It is open so that everybody with a GitHub account can make comments and suggestions for improvement. Readers can contribute in two ways. One way is to add an issue. The second way is to contribute content directly through the edit button at the top of the page (i.e. a symbol showing a pencil in a square). That button is linked to the rmarkdown source file of each page. You can correct typos or add new text and then submit a GitHub pull request. We try to respond to you as quickly as possible. We are looking forward to your contribution! Acknowledgments We thank Yihui Xie for providing bookdown which makes is much fun to write open books such as ours. "],
["PART-I.html", "1 Introduction to PART I Further reading", " 1 Introduction to PART I Further reading A really good introductory book to Bayesian data analyses is (McElreath 2016). This book starts with a thorough introduction to applying the Bayes theorem for drawing inference from data. In addition, it carefully discusses what can and what cannot be concluded from statistical results. We like this very much. We like looking up statistical methods in papers and books written by Andrew Gelman (e.g. (Gelman et al. 2014)) and Trevor Hastie (e.g. (T. Hastie, Tibshirani, and Friedman 2009, Efron and Hastie (2016))) because both explain complicated things in a concise and understandable way. "],
["distributions.html", "2 Probability distributions 2.1 Introduction 2.2 Normal distribution 2.3 Poisson distribution 2.4 Gamma distribution", " 2 Probability distributions 2.1 Introduction hist(rnorm(1000)) Figure 2.1: Das ist ein Versuch. 2.2 Normal distribution xxx 2.3 Poisson distribution xxx 2.4 Gamma distribution xxx "],
["priors.html", "3 Prior distributions 3.1 Introduction 3.2 How to choose a prior 3.3 Prior sensitivity", " 3 Prior distributions 3.1 Introduction 3.2 How to choose a prior Tabelle von Fränzi (CourseIII_glm_glmmm/course2018/presentations_handouts/presentations) 3.3 Prior sensitivity xxx "],
["ridge.html", "4 Ridge regression 4.1 Introduction", " 4 Ridge regression We should provide an example in Stan. 4.1 Introduction # Settings library(R2OpenBUGS) bugslocation &lt;- &quot;C:/Program Files/OpenBUGS323/OpenBugs.exe&quot; # location of OpenBUGS bugsworkingdir &lt;- file.path(getwd(), &quot;BUGS&quot;) # Bugs working directory #------------------------------------------------------------------------------- # Simulate fake data #------------------------------------------------------------------------------- library(MASS) n &lt;- 50 # sample size b0 &lt;- 1.2 b &lt;- rnorm(5, 0, 2) Sigma &lt;- matrix(c(10,3,3,2,1, 3,2,3,2,1, 3,3,5,3,2, 2,2,3,10,3, 1,1,2,3,15),5,5) Sigma x &lt;- mvrnorm(n = n, rep(0, 5), Sigma) simresid &lt;- rnorm(n, 0, sd=3) # residuals x.z &lt;- x for(i in 1:ncol(x)) x.z[,i] &lt;- (x[,i]-mean(x[,i]))/sd(x[,i]) y &lt;- b0 + x.z%*%b + simresid # calculate y, i.e. the data #------------------------------------------------------------------------------- # Function to generate initial values #------------------------------------------------------------------------------- inits &lt;- function() { list(b0=runif(1, -2, 2), b=runif(5, -2, 2), sigma=runif(1, 0.1, 2)) } #------------------------------------------------------------------------------- # Run OpenBUGS #------------------------------------------------------------------------------- parameters &lt;- c(&quot;b0&quot;, &quot;b&quot;, &quot;sigma&quot;) lambda &lt;- c(1, 2, 10, 25, 50, 100, 500, 1000, 10000) bs &lt;- matrix(ncol=length(lambda), nrow=length(b)) bse &lt;- matrix(ncol=length(lambda), nrow=length(b)) for(j in 1:length(lambda)){ datax &lt;- list(y=as.numeric(y), x=x, n=n, mb=rep(0, 5), lambda=lambda[j]) fit &lt;- bugs(datax, inits, parameters, model.file=&quot;ridge_regression.txt&quot;, n.thin=1, n.chains=2, n.burnin=5000, n.iter=10000, debug=FALSE, OpenBUGS.pgm = bugslocation, working.directory=bugsworkingdir) bs[,j] &lt;- fit$mean$b bse[,j] &lt;- fit$sd$b } range(bs) plot(1:length(lambda), seq(-2, 1, length=length(lambda)), type=&quot;n&quot;) colkey &lt;- rainbow(length(b)) for(j in 1:nrow(bs)){ lines(1:length(lambda), bs[j,], col=colkey[j], lwd=2) lines(1:length(lambda), bs[j,]-2*bse[j,], col=colkey[j], lty=3) lines(1:length(lambda), bs[j,]+2*bse[j,], col=colkey[j], lty=3) } abline(h=0) round(fit$summary,2) #------------------------------------------------------------------------------- # Run WinBUGS #------------------------------------------------------------------------------- library(R2WinBUGS) bugsdir &lt;- &quot;C:/Users/fk/WinBUGS14&quot; # mod &lt;- bugs(datax, inits= inits, parameters, model.file=&quot;normlinreg.txt&quot;, n.chains=2, n.iter=1000, n.burnin=500, n.thin=1, debug=TRUE, bugs.directory=bugsdir, program=&quot;WinBUGS&quot;, working.directory=bugsworkingdir) #------------------------------------------------------------------------------- # Test convergence and make inference #------------------------------------------------------------------------------- library(blmeco) # Make Figure 12.2 par(mfrow=c(3,1)) historyplot(fit, &quot;beta0&quot;) historyplot(fit, &quot;beta1&quot;) historyplot(fit, &quot;sigmaRes&quot;) # Parameter estimates print(fit$summary, 3) # Make predictions for covariate values between 10 and 30 newdat &lt;- data.frame(x=seq(10, 30, length=100)) Xmat &lt;- model.matrix(~x, data=newdat) predmat &lt;- matrix(ncol=fit$n.sim, nrow=nrow(newdat)) for(i in 1:fit$n.sim) predmat[,i] &lt;- Xmat%*%c(fit$sims.list$beta0[i], fit$sims.list$beta1[i]) newdat$lower.bugs &lt;- apply(predmat, 1, quantile, prob=0.025) newdat$upper.bugs &lt;- apply(predmat, 1, quantile, prob=0.975) plot(y~x, pch=16, las=1, cex.lab=1.4, cex.axis=1.2, type=&quot;n&quot;, main=&quot;&quot;) polygon(c(newdat$x, rev(newdat$x)), c(newdat$lower.bugs, rev(newdat$upper.bugs)), col=grey(0.7), border=NA) abline(c(fit$mean$beta0, fit$mean$beta1), lwd=2) box() points(x,y) "],
["sem.html", "5 Structural equation model 5.1 Introduction", " 5 Structural equation model We should provide an example in Stan. 5.1 Introduction ------------------------------------------------------------------------------------------------------ # General settings #------------------------------------------------------------------------------------------------------ library(MASS) library(rjags) library(MCMCpack) #------------------------------------------------------------------------------------------------------ # Simulation #------------------------------------------------------------------------------------------------------ n &lt;- 100 heffM &lt;- 0.6 # effect of H on M heffCS &lt;- 0.0 # effect of H on Clutch size meffCS &lt;- 0.6 # effect of M on Clutch size SigmaM &lt;- matrix(c(0.1,0.04,0.04,0.1),2,2) meffm1 &lt;- 0.6 meffm2 &lt;- 0.7 SigmaH &lt;- matrix(c(0.1,0.04,0.04,0.1),2,2) meffh1 &lt;- 0.6 meffh2 &lt;- -0.7 # Latente Variablen H &lt;- rnorm(n, 0, 1) M &lt;- rnorm(n, heffM * H, 0.1) # Clutch size CS &lt;- rnorm(n, heffCS * H + meffCS * M, 0.1) # Indicators eM &lt;- cbind(meffm1 * M, meffm2 * M) datM &lt;- matrix(NA, ncol = 2, nrow = n) eH &lt;- cbind(meffh1 * H, meffh2 * H) datH &lt;- matrix(NA, ncol = 2, nrow = n) for(i in 1:n) { datM[i,] &lt;- mvrnorm(1, eM[i,], SigmaM) datH[i,] &lt;- mvrnorm(1, eH[i,], SigmaH) } #------------------------------------------------------------------------------ # JAGS Model #------------------------------------------------------------------------------ dat &lt;- list(datM = datM, datH = datH, n = n, CS = CS, #H = H, M = M, S3 = matrix(c(1,0,0,1),nrow=2)/1) # Function to create initial values inits &lt;- function() { list( meffh = runif(2, 0, 0.1), meffm = runif(2, 0, 0.1), heffM = runif(1, 0, 0.1), heffCS = runif(1, 0, 0.1), meffCS = runif(1, 0, 0.1), tauCS = runif(1, 0.1, 0.3), tauMH = runif(1, 0.1, 0.3), tauH = rwish(3,matrix(c(.02,0,0,.04),nrow=2)), tauM = rwish(3,matrix(c(.02,0,0,.04),nrow=2)) # M = as.numeric(rep(0, n)) ) } t.n.thin &lt;- 50 t.n.chains &lt;- 2 t.n.burnin &lt;- 20000 t.n.iter &lt;- 50000 # Run JAGS jagres &lt;- jags.model(&#39;JAGS/BUGSmod1.R&#39;,data = dat, n.chains = t.n.chains, inits = inits, n.adapt = t.n.burnin) params &lt;- c(&quot;meffh&quot;, &quot;meffm&quot;, &quot;heffM&quot;, &quot;heffCS&quot;, &quot;meffCS&quot;) mod &lt;- coda.samples(jagres, params, n.iter=t.n.iter, thin=t.n.thin) res &lt;- round(data.frame(summary(mod)$quantiles[, c(3, 1, 5)]), 3) res$TRUEVALUE &lt;- c(heffCS, heffM, meffCS, meffh1, meffh2, meffm1, meffm2) res # Traceplots post &lt;- data.frame(rbind(mod[[1]], mod[[2]])) names(post) &lt;- dimnames(mod[[1]])[[2]] par(mfrow = c(3,3)) param &lt;- c(&quot;meffh[1]&quot;, &quot;meffh[2]&quot;, &quot;meffm[1]&quot;, &quot;meffm[2]&quot;, &quot;heffM&quot;, &quot;heffCS&quot;, &quot;meffCS&quot;) traceplot(mod[, match(param, names(post))]) "],
["PART-II.html", "6 Introduction to PART II 6.1 Further reading", " 6 Introduction to PART II During our courses we are sometimes asked to give an introduction to some R-related stuff covering data analysis, presentation of results or rather specialist topics in ecology. In this part we present collected these introduction and try to keep them updated. This is also a commented collection of R-code that we documented for our own work. We hope this might be useful olso for other readers. 6.1 Further reading R for Data Science by Garrett Grolemund and Hadley Wickham: Introduces the tidyverse framwork. It explains how to get data into R, get it into the most useful structure, transform it, visualise it and model it. Geocomputation with R: This book is aimed at people who want to do spatial data analysis, visualization and modeling using open source software and reproducible workflows. "],
["datamanip.html", "7 Data preparation 7.1 Basic operations 7.2 Conection to existing sql-DB 7.3 Further reading", " 7 Data preparation 7.1 Basic operations Alle Packete laden library(tidyverse) oder nur library(tidyverse). dat &lt;- iris %&gt;% as.tibble() %&gt;% filter(Sepal.Length &gt; 5) %&gt;% group_by(Species) %&gt;% summarise(n = n(), mittel = mean(Petal.Length)) 7.2 Conection to existing sql-DB Die in diesem Kapitel präsentierten Datenabfragen nutzen das R-Packet dplyr. Damit der R-Code funktioniert muss eine Kopie der SQLite Datenbank lokal verfügbar sein (DropBox-Zugang von Ro beziehen). Als Grundlage muss also erst das R-Packet geladen werden und den Link zu den Datebbanken hergestellt werden. # Connection to data base db &lt;- src_sqlite(path = &quot;~/Documents/Dropbox/DB_BDM.db&quot;, create = FALSE) rd &lt;- src_sqlite(path = &quot;~/Documents/Dropbox/DB_CHRD.db&quot;, create = FALSE) 7.2.1 Abfragen zur Artenvielfalt Im Folgenden soll die mittlere Artenvielfalt für Z9 Plfanzen im LANAG für die Periode 2013 bis 2017 im Wald berechnet werden. # Auswahl der gültigen Aufnahmen in der entprechenden Periode ausw &lt;- inner_join( tbl(db, &quot;STICHPROBE_Z9&quot;) %&gt;% filter(LANAG_aktuell == &quot;ja&quot;) %&gt;% dplyr::select(aID_STAO), tbl(db, &quot;KD_Z9&quot;) %&gt;% filter(yearP &gt;= 2013 &amp; yearP &lt;= 2017 &amp; !is.na(yearPl) &amp; HN == &quot;Wald&quot;) %&gt;% dplyr::select(aID_KD, aID_STAO) ) # Artenvielfalt für jede Aufnahme anhängen dat &lt;- left_join( ausw, tbl(db, &quot;PL&quot;) %&gt;% filter(Z7 == 0) %&gt;% group_by(aID_KD) %&gt;% summarise(AZ = n()) ) %&gt;% data.frame # AZ von gültigen Aufnahmen ohne Arten auf 0 setzen dat &lt;- replace_na(dat, list(AZ = 0)) # Mittelwert berechnen mean(dat$AZ) Der folgende Code plottet die mittlere Artenvielfalt der BDM Z7 Pflanzen (ohne Verdichtung) gegen die Meereshöhe. ausw &lt;- inner_join( tbl(db, &quot;STICHPROBE_Z7&quot;) %&gt;% filter(BDM_aktuell == &quot;ja&quot; &amp; BDM_Verdichtung == &quot;nein&quot;) %&gt;% dplyr::select(aID_STAO), tbl(db, &quot;KD_Z7&quot;) %&gt;% filter(yearP &gt;= 2013 &amp; yearP &lt;= 2017 &amp; !is.na(yearPl) &amp; Aufnahmetyp == &quot;Normalaufnahme_Z7&quot;) %&gt;% dplyr::select(aID_KD, aID_STAO) ) # Artenvielfalt für jede Aufnahme berechnen dat &lt;- left_join( ausw, tbl(db, &quot;PL&quot;) %&gt;% filter(Z7 == 1) %&gt;% group_by(aID_KD) %&gt;% summarise(AZ = n()) ) # Meereshöhe anhängen dat &lt;- left_join(dat, tbl(db, &quot;RAUMDATEN_Z7&quot;) %&gt;% select(aID_STAO, Hoehe)) dat &lt;- replace_na(dat %&gt;% data.frame, list(AZ = 0)) # Plot results ggplot(dat, aes(x = Hoehe, y = AZ)) + geom_point(shape = 16) + geom_smooth() 7.3 Further reading R for Data Science by Garrett Grolemund and Hadley Wickham: Introduces the tidyverse framwork. It explains how to get data into R, get it into the most useful structure, transform it, visualise it and model it. "],
["reproducible.html", "8 Reproducible Research 8.1 Introduction 8.2 Add citations 8.3 Further reading", " 8 Reproducible Research 8.1 Introduction 8.2 Add citations Mit dem Packet knitcitations können Referenzen relativ einfach gesucht und in das .bib File eingefügt werden. Erst muss das Packet geladen und der lokale Speicher gelöscht werden. Das Format pandoc scheint auch nötig zu sein. library(knitcitations) cleanbib() cite_options(citation_format = &quot;pandoc&quot;) Danach kann man einfach nach einer Referenz mit Stichworten, Autoren oder DOI-Nummer. Zum Beispiel sucht der Befehl citep(&quot;Roth, Plattner Amrhein&quot;) die entsprechende Referenz und fügt diese ein (T. Roth, Plattner, and Amrhein 2014). Der folgende Befehl schreibt alle Referenzen aus der Zwischenablage in das .bib File. write.bibtex(file=&quot;References.bib&quot;, append = TRUE) Am einfachsten folgende Hilfsfunktion benutzen um aus der Konsole eine Referenz ins .bib File zu schreiben. ref &lt;- function(x) { library(knitcitations) cleanbib() print(citep(x)) write.bibtex(file=&quot;References.bib&quot;, append = TRUE) } 8.3 Further reading Rmarkdown: The first official book authored by the core R Markdown developers that provides a comprehensive and accurate reference to the R Markdown ecosystem. With R Markdown, you can easily create reproducible data analysis reports, presentations, dashboards, interactive applications, books, dissertations, websites, and journal articles, while enjoying the simplicity of Markdown and the great power of R and other languages. Bookdown by Yihui Xie: A guide to authoring books with R Markdown, including how to generate figures and tables, and insert cross-references, citations, HTML widgets, and Shiny apps in R Markdown. The book can be exported to HTML, PDF, and e-books (e.g. EPUB). The book style is customizable. You can easily write and preview the book in RStudio IDE or other editors, and host the book wherever you want (e.g. bookdown.org). Our book is written using bookdown. "],
["rgis.html", "9 Spatial analyses and maps 9.1 Hintergrund 9.2 Coordinate systems 9.3 Further reading", " 9 Spatial analyses and maps 9.1 Hintergrund Some useful packages - raster: Very efficient for raster data. - sf: Very efficient package for data other than raster data. It also link to GEOS, GDAL proj.4. library(sf) library(raster) 9.2 Coordinate systems The following are some definitions of coordinate systems that I often use: ch1903 &lt;- CRS(&quot;+init=epsg:21781&quot;) # Old Swiss grid 1903 chLV95 &lt;- CRS(&quot;+init=epsg:2056&quot;) # New Swiss grid 1903+ wgs84 &lt;- CRS(&quot;+init=epsg:4326&quot;) # WGS 84 The following code transfers a spatial point from one coordinate reference system to an ohter: pt &lt;- data.frame(x=650007.0, y=227023.0) coordinates(pt) &lt;- ~ x + y proj4string(pt) &lt;- ch1903 spTransform(pt, chLV95) ## class : SpatialPoints ## features : 1 ## extent : 2650007, 2650007, 1227023, 1227023 (xmin, xmax, ymin, ymax) ## coord. ref. : +init=epsg:2056 +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs 9.3 Further reading Geocomputation with R: This book is aimed at people who want to do spatial data analysis, visualization and modeling using open source software and reproducible workflows. "],
["furthertopics.html", "10 Further topics 10.1 Bioacoustic analyse 10.2 Python", " 10 Further topics This is a collection of short introductions or links with commented R code that cover other topics that might be usful for ecologists. 10.1 Bioacoustic analyse Bioacoustic analyses are nicely covered in a blog by Marcelo Araya-Salas. 10.2 Python Like R, python is a is a high-level programming language that is used by many ecologists. The reticulate package provides a comprehensive set of tools for interoperability between Python and R. library(reticulate) use_python(&quot;/usr/local/bin/python&quot;) # Reference to python installation # This is python print &#39;Hello, world!&#39; ## Hello, world! "],
["PART-III.html", "11 Introduction to PART III 11.1 Model notations", " 11 Introduction to PART III This part is a collection of more complicated ecological models to analyse data that may not be analysed with the traditional linear models that we covered in PART I of this book. 11.1 Model notations It is unavoidable that different authors use different notations for the same thing, or that the same notation is used for different things. We try to use, whenever possible, notations that is commonly used at the International Statistical Ecology Congress ISEC. Resulting from an earlier ISEC, Thomson et al. (2009) give guidelines on what letter should be used for which parameter in order to achieve a standard notation at least among people working with classical mark-recapture models. However, the alphabet has fewer letters compared to the number of ecological parameters. Therefore, the same letter cannot stand for the same parameter across all papers, books and chapters. Here, we try to use the same letter for the same parameter within the same chapter. "],
["cjs-with-mix.html", "12 Fränzi Modell 12.1 Introduction", " 12 Fränzi Modell 12.1 Introduction "],
["referenzen.html", "Referenzen", " Referenzen "]
]
